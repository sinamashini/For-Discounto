// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  contact String?
  role           String   @default("USER")
  nationalCode String? @unique
  clients  Clients[]
  tokens   Token[]
  sessions Session[]
  logs OpratorLogs[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user   User @relation(fields: [userId], references: [id])
  userId Int
  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Clients {
  id             Int  @id @default(autoincrement())
  name           String
  contact        String
  nationalCode   String?  @unique
  typeOfClient   ClientType @default(PERSON)
  notes          String?
  email          String?
  address        String?
  hashedPassword String?
  parentId       Int?
  parent         Clients? @relation("Introduced", fields: [parentId], references: [id])
  introduced     Clients[] @relation("Introduced")
  createdAt      DateTime @default(now())
  userId Int?
  createdBy User? @relation(fields: [userId], references: [id])
  gifts Gifts[]
  isActive Boolean @default(true)
  packageClients PackagesClients[]
  clientMapChild ClientsMap[] @relation("Child")
  clientMapParent ClientsMap[] @relation("Parent")
  buyHistory BuyHistory[]
  discounts DiscountHistory[]
  remainDiscountAmount Int @default(0)
  burnedDiscountAmount Int @default(0)
}

model ClientsMap {
    id Int  @id @default(autoincrement())
    level Int @default(1)
    child Clients? @relation("Child", fields: [childId], references: [id])
    childId Int?
    parent Clients? @relation("Parent", fields: [parentId], references: [id])
    parentId Int?
    status StatusEnum
}

enum ClientType {
  PERSON
  ORGANIZATION
}

enum StatusEnum {
  ACTIVE
  USED
  HALF_USED
  DEACTIVE
}

model Gifts {
  id Int @id @default(autoincrement())
  name String
  content String
  client Clients @relation(fields: [clientId], references: [id])
  clientId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model OpratorLogs {
  id Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  action String
  happend DateTime @default(now())
}

model Packages {
  id  Int  @id @default(autoincrement())
  name String
  deadLineAfterMaxPayment Int?
  maxPayment Int @default(0)
  numberOfPeopleIncluded Int @default(0)
  createdAt DateTime  @default(now())
  packageClients PackagesClients[]
  level PackageLevels[]
  status PackageStatus @default(ACTIVE)
  version Int @default(1)
}

enum PackageStatus {
  ACTIVE
  ARCHIVE
}

model PackagesClients {
  client Clients @relation(fields: [clientId], references: [id])
  clientId Int
  package Packages @relation(fields: [packageId], references: [id])
  packageId Int
  status StatusEnum @default(ACTIVE)
  @@id([clientId, packageId])
}

model PackageLevels {
  id Int @id @default(autoincrement())
  levelNumber Int @default(1)
  percent Int @default(0)
  packeges Packages @relation(fields: [packageId], references: [id])
  packageId Int
}

model BuyHistory {
    id Int @id @default(autoincrement())
    price Int @default(0)
    priceWithDiscount Int @default(0)
    description String?
    createdAt DateTime  @default(now())
    updatedAt DateTime @updatedAt
    client Clients @relation(fields: [clientId], references: [id])
    clientId Int
}

model DiscountHistory {
    id Int @id @default(autoincrement())
    price Int @default(0)
    client Clients @relation(fields: [clientId], references: [id])
    clientId Int
    numberOfPeopleIncluded Int? @default(0)
    remain Int? @default(0)
    createdAt DateTime  @default(now())
}
